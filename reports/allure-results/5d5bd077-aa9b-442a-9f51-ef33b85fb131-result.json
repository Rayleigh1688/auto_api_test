{"name": "test_api[case2]", "status": "failed", "statusDetails": {"message": "AssertionError: [状态码断言失败] 实际: 200，预期: 400。\n  完整响应: {\"status\": true, \"data\": \"t:f00aa7e91009f58b016fcdde9416103a\"}\nassert 200 == 400\n +  where 400 = <built-in method get of dict object at 0x106baf380>('status_code')\n +    where <built-in method get of dict object at 0x106baf380> = {'status_code': 400}.get", "trace": "case = {'asserts': [{'equals': True, 'path': '$.status'}], 'content_type': 'cbor', 'expected': {'status_code': 400}, 'extract': {'access_token': '$.data'}, ...}\n\n    def test_api(case):\n        method = case['method']\n        url = case['url']\n        params = case.get('params', {})\n        expected = case.get('expected', {})\n        asserts = case.get('asserts', [])\n        content_type = case.get('content_type', 'cbor')\n        headers = case.get('headers', {})\n    \n        print(f\"=== Running: {case['name']} ===\")\n        status_code, resp,  = handler.send(method, url, params, content_type, headers)\n    \n        with allure.step(\"请求参数\"):\n            allure.attach(json.dumps(params, indent=2, ensure_ascii=False), name=\"Request\", attachment_type=allure.attachment_type.JSON)\n        with allure.step(\"响应结果\"):\n            allure.attach(json.dumps(resp, indent=2, ensure_ascii=False), name=\"Response\", attachment_type=allure.attachment_type.JSON)\n    \n>       assert status_code == expected.get('status_code'), (\n            f\"[状态码断言失败] 实际: {status_code}，预期: {expected.get('status_code')}。\\n完整响应: {json.dumps(resp, ensure_ascii=False)}\"\n        )\nE       AssertionError: [状态码断言失败] 实际: 200，预期: 400。\nE         完整响应: {\"status\": true, \"data\": \"t:f00aa7e91009f58b016fcdde9416103a\"}\nE       assert 200 == 400\nE        +  where 400 = <built-in method get of dict object at 0x106baf380>('status_code')\nE        +    where <built-in method get of dict object at 0x106baf380> = {'status_code': 400}.get\n\ntests/test_api.py:52: AssertionError"}, "steps": [{"name": "请求参数", "status": "passed", "attachments": [{"name": "Request", "source": "22426f08-b5e2-41c7-9756-f22d7d584d12-attachment.json", "type": "application/json"}], "start": 1748605089466, "stop": 1748605089467}, {"name": "响应结果", "status": "passed", "attachments": [{"name": "Response", "source": "b127fdc0-5128-4c2e-90d8-5bdf03b5927c-attachment.json", "type": "application/json"}], "start": 1748605089467, "stop": 1748605089467}], "parameters": [{"name": "case", "value": "{'name': '使用 密码 登录', 'method': 'POST', 'url': 'member/login', 'content_type': 'cbor', 'params': {'country_code': '+63', 'phone': '9888888066', 'password': 'A12345679'}, 'expected': {'status_code': 400}, 'asserts': [{'path': '$.status', 'equals': True}], 'extract': {'access_token': '$.data'}}"}], "start": 1748605089344, "stop": 1748605089467, "uuid": "2ad39133-e77d-4c71-b6d6-35a3000f10fb", "historyId": "5936585985e08ca54d0aac22c1b09e0e", "testCaseId": "b7c63ae6f95bb37a8d872fe133285bfd", "fullName": "tests.test_api#test_api", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "Rayleigh.local"}, {"name": "thread", "value": "33297-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}